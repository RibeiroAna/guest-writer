---
layout: post
title: "TypeScript from bottom to top - Part 1: Developing an API with Nest.js"
description: "Learn how to use TypeScript to create a fullstack web application with Angular (frontend) and Nest (backend)"
date: "2018-06-07 08:30"
author:
  name: "Ana Ribeiro"
  url: "https://twitter.com/anacosri"
  mail: "aninhacostaribeiro@gmail.com"
  avatar: "https://twitter.com/anacosri/profile_image?size=original"
design:
  image: https://cdn.auth0.com/blog/nestjs/logo.png
  bg_color: "#090909"
related:
- 2017-11-15-an-example-of-all-possible-elements
---

**TL;DR:** 

## What is Nest and why use it with Angular?

[Nest.js](https://docs.nestjs.com/) is one framework of Node.js, what makes it special is that it addresses a problem that no other does: the architecture of a Node project. If you have ever tried to build a project using Node.js you may have realised that you can do a lot with one class (for example, a Express Middleware can do from authentication to validation) and projects can grow in a confusing way. Nest addresses this problem by creating classes with few (or single) responsabilities.

One other special thing that Nest brings to Node is the possibility to write the code in TypeScript within the project (if you have never heard about TypeScript, I would recommend reading [this introduction](https://auth0.com/blog/typescript-practical-introduction/) before this article). Angular is written in TypeScript and Nest is highly inspired by Angular's architecture: many elements in Nest have the same name in Angular (for example, guards): so that is because we are going to use Angular together Nest in this tutorial (but the backend application is idependent from the frontend, so you may use your favourite frontend framework to consume the endpoints of this API). 

## The app we are building

## Getting started with Nest

## Creating endpoints

## Adding validation with Pipes

## Adding identification with Auth0

### A note about Express/Nest Middlewares

## Adding role authorization with Auth0